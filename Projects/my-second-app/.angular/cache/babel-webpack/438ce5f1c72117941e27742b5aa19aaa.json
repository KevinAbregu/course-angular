{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Effect, ofType } from \"@ngrx/effects\";\nimport { map, switchMap, withLatestFrom } from \"rxjs/operators\";\nimport * as RecipesActions from './recipe.actions';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"@angular/common/http\";\nimport * as i3 from \"@ngrx/store\";\nexport class RecipesEffects {\n  constructor(actions$, http, store) {\n    this.actions$ = actions$;\n    this.http = http;\n    this.store = store;\n    this.fetchRecipes = this.actions$.pipe(ofType(RecipesActions.FETCH_RECIPES), switchMap(() => {\n      return this.http.get(\"https://ng-course-recipe-book-b13b5-default-rtdb.firebaseio.com/recipes.json\");\n    }), map(recipes => {\n      return recipes.map(recipe => {\n        return Object.assign(Object.assign({}, recipe), {\n          ingredients: recipe.ingredients ? recipe.ingredients : []\n        });\n      });\n    }), map(recipes => {\n      return new RecipesActions.SetRecipes(recipes);\n    }));\n    this.storeRecipes = this.actions$.pipe(ofType(RecipesActions.STORE_RECIPES), withLatestFrom(this.store.select('recipes')), switchMap(([actionData, recipesState]) => this.http.put(\"https://ng-course-recipe-book-b13b5-default-rtdb.firebaseio.com/recipes.json\", recipesState.recipes)));\n  }\n\n}\n\nRecipesEffects.ɵfac = function RecipesEffects_Factory(t) {\n  return new (t || RecipesEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.HttpClient), i0.ɵɵinject(i3.Store));\n};\n\nRecipesEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: RecipesEffects,\n  factory: RecipesEffects.ɵfac\n});\n\n__decorate([Effect()], RecipesEffects.prototype, \"fetchRecipes\", void 0);\n\n__decorate([Effect({\n  dispatch: false\n})], RecipesEffects.prototype, \"storeRecipes\", void 0);","map":null,"metadata":{},"sourceType":"module"}