{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Effect, ofType } from \"@ngrx/effects\";\nimport { of } from \"rxjs\";\nimport { catchError, map, switchMap, tap } from \"rxjs/operators\";\nimport { environment } from \"src/environments/environment\";\nimport { User } from \"../user.model\";\nimport * as AuthActions from \"./auth.actions\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"@angular/common/http\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"../auth.service\";\n\nconst handleAuthentication = (expiresIn, email, userId, token) => {\n  const expirationDate = new Date(new Date().getTime() + expiresIn * 1000);\n  localStorage.setItem('userData', JSON.stringify(new User(email, userId, token, expirationDate)));\n  return new AuthActions.AuthenticateSuccess({\n    email: email,\n    userId: userId,\n    token: token,\n    expirationDate: expirationDate,\n    redirect: true\n  });\n};\n\nconst handleError = errorRes => {\n  let errorMessage = 'An unknown error ocurred!';\n\n  if (!errorRes.error || !errorRes.error.error) {\n    return of(new AuthActions.AuthenticateFail(errorMessage));\n  }\n\n  switch (errorRes.error.error.message) {\n    case 'EMAIL_EXISTS':\n      errorMessage = 'This email exists already.';\n      break;\n\n    case 'EMAIL_NOT_FOUND':\n      errorMessage = 'This email does not exist.';\n      break;\n\n    case 'INVALID_PASSWORD':\n      errorMessage = 'This password is not correct.';\n      break;\n  }\n\n  return of(new AuthActions.AuthenticateFail(errorMessage));\n};\n\nexport class AuthEffects {\n  constructor(actions$, http, router, authService) {\n    this.actions$ = actions$;\n    this.http = http;\n    this.router = router;\n    this.authService = authService;\n    this.authSignUp = this.actions$.pipe(ofType(AuthActions.SIGNUP_START), switchMap(signupAction => {\n      return this.http.post(\"https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=\" + environment.firebaseAPIkey, {\n        email: signupAction.payload.email,\n        password: signupAction.payload.password,\n        returnSecureToken: true\n      }).pipe(tap(resData => {\n        this.authService.setLogoutTimer(+resData.expiresIn * 1000);\n      }), map(resData => {\n        return handleAuthentication(+resData.expiresIn, resData.email, resData.localId, resData.idToken);\n      }), catchError(error => {\n        return handleError(error);\n      }));\n    }));\n    this.authLogin = this.actions$.pipe(ofType(AuthActions.LOGIN_START), switchMap(authData => {\n      return this.http.post(\"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=\" + environment.firebaseAPIkey, {\n        email: authData.payload.email,\n        password: authData.payload.password,\n        returnSecureToken: true\n      }).pipe(tap(resData => {\n        this.authService.setLogoutTimer(+resData.expiresIn * 1000);\n      }), map(resData => {\n        return handleAuthentication(+resData.expiresIn, resData.email, resData.localId, resData.idToken);\n      }), catchError(error => {\n        return handleError(error);\n      }));\n    }));\n    this.authRedirect = this.actions$.pipe(ofType(AuthActions.AUTHENTICATE_SUCCESS), tap(authSuccessAction => {\n      if (authSuccessAction.payload.redirect) {\n        this.router.navigate(['/']);\n      }\n    }));\n    this.authLogout = this.actions$.pipe(ofType(AuthActions.LOGOUT), tap(() => {\n      localStorage.removeItem('userData');\n      this.authService.clearLogoutTimer();\n      this.router.navigate(['/auth']);\n    }));\n    this.autoLogin = this.actions$.pipe(ofType(AuthActions.AUTOLOGIN), map(() => {\n      const userData = JSON.parse(localStorage.getItem('userData'));\n\n      if (!userData) {\n        return {\n          type: 'DUMMY'\n        };\n      }\n\n      const loadedUser = new User(userData.email, userData.id, userData._token, new Date(userData._tokenExpirationDate));\n\n      if (loadedUser.token) {\n        this.authService.setLogoutTimer(new Date(userData._tokenExpirationDate).getTime() - new Date().getTime());\n        return new AuthActions.AuthenticateSuccess({\n          email: loadedUser.email,\n          userId: loadedUser.id,\n          token: loadedUser.token,\n          expirationDate: new Date(userData._tokenExpirationDate),\n          redirect: false\n        });\n      }\n\n      return {\n        type: 'DUMMY'\n      };\n    }));\n  }\n\n}\n\nAuthEffects.ɵfac = function AuthEffects_Factory(t) {\n  return new (t || AuthEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.HttpClient), i0.ɵɵinject(i3.Router), i0.ɵɵinject(i4.AuthService));\n};\n\nAuthEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthEffects,\n  factory: AuthEffects.ɵfac\n});\n\n__decorate([Effect()], AuthEffects.prototype, \"authSignUp\", void 0);\n\n__decorate([Effect()], AuthEffects.prototype, \"authLogin\", void 0);\n\n__decorate([Effect({\n  dispatch: false\n})], AuthEffects.prototype, \"authRedirect\", void 0);\n\n__decorate([Effect({\n  dispatch: false\n})], AuthEffects.prototype, \"authLogout\", void 0);\n\n__decorate([Effect()], AuthEffects.prototype, \"autoLogin\", void 0);","map":null,"metadata":{},"sourceType":"module"}